// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public static partial class CrystallizeClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::WrongNestedCollection.State.CrystallizeClientStoreAccessor> AddCrystallizeClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::WrongNestedCollection.State.CrystallizeClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::WrongNestedCollection.GetCustomerSubscriptionsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::WrongNestedCollection.CrystallizeClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::WrongNestedCollection.ICrystallizeClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::WrongNestedCollection.State.CrystallizeClientStoreAccessor>("CrystallizeClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("CrystallizeClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::WrongNestedCollection.State.SubscriptionContractEntity, global::WrongNestedCollection.GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionContract>, global::WrongNestedCollection.State.GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionContractFromSubscriptionContractEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::WrongNestedCollection.State.SubscriptionContractMeteredVariableReferenceEntity, global::WrongNestedCollection.GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReference>, global::WrongNestedCollection.State.GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReferenceFromSubscriptionContractMeteredVariableReferenceEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::WrongNestedCollection.State.SubscriptionPlanMeteredVariableEntity, global::WrongNestedCollection.GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariable>, global::WrongNestedCollection.State.GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariableFromSubscriptionPlanMeteredVariableEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::WrongNestedCollection.TierTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::WrongNestedCollection.IGetCustomerSubscriptionsResult>, global::WrongNestedCollection.State.GetCustomerSubscriptionsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::WrongNestedCollection.IGetCustomerSubscriptionsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::WrongNestedCollection.IGetCustomerSubscriptionsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::WrongNestedCollection.IGetCustomerSubscriptionsResult>, global::WrongNestedCollection.State.GetCustomerSubscriptionsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::WrongNestedCollection.IGetCustomerSubscriptionsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::WrongNestedCollection.IGetCustomerSubscriptionsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::WrongNestedCollection.IGetCustomerSubscriptionsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::WrongNestedCollection.GetCustomerSubscriptionsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::WrongNestedCollection.IGetCustomerSubscriptionsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::WrongNestedCollection.GetCustomerSubscriptionsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::WrongNestedCollection.State.CrystallizeClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::WrongNestedCollection.CrystallizeClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::WrongNestedCollection.ICrystallizeClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::WrongNestedCollection.CrystallizeClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace WrongNestedCollection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCustomerSubscriptionsResult : global::System.IEquatable<GetCustomerSubscriptionsResult>, IGetCustomerSubscriptionsResult
    {
        public GetCustomerSubscriptionsResult(global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract subscriptionContract)
        {
            SubscriptionContract = subscriptionContract;
        }

        public global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract SubscriptionContract { get; }

        public virtual global::System.Boolean Equals(GetCustomerSubscriptionsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (SubscriptionContract.Equals(other.SubscriptionContract));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomerSubscriptionsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * SubscriptionContract.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCustomerSubscriptions_SubscriptionContract_SubscriptionContractQueries : global::System.IEquatable<GetCustomerSubscriptions_SubscriptionContract_SubscriptionContractQueries>, IGetCustomerSubscriptions_SubscriptionContract_SubscriptionContractQueries
    {
        public GetCustomerSubscriptions_SubscriptionContract_SubscriptionContractQueries(global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany? getMany)
        {
            GetMany = getMany;
        }

        public global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany? GetMany { get; }

        public virtual global::System.Boolean Equals(GetCustomerSubscriptions_SubscriptionContract_SubscriptionContractQueries? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((GetMany is null && other.GetMany is null) || GetMany != null && GetMany.Equals(other.GetMany)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomerSubscriptions_SubscriptionContract_SubscriptionContractQueries)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (GetMany != null)
                {
                    hash ^= 397 * GetMany.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCustomerSubscriptions_SubscriptionContract_GetMany_SubscriptionContractConnection : global::System.IEquatable<GetCustomerSubscriptions_SubscriptionContract_GetMany_SubscriptionContractConnection>, IGetCustomerSubscriptions_SubscriptionContract_GetMany_SubscriptionContractConnection
    {
        public GetCustomerSubscriptions_SubscriptionContract_GetMany_SubscriptionContractConnection(global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges>? edges)
        {
            Edges = edges;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges>? Edges { get; }

        public virtual global::System.Boolean Equals(GetCustomerSubscriptions_SubscriptionContract_GetMany_SubscriptionContractConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Edges, other.Edges));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomerSubscriptions_SubscriptionContract_GetMany_SubscriptionContractConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Edges != null)
                {
                    foreach (var Edges_elm in Edges)
                    {
                        hash ^= 397 * Edges_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_SubscriptionContractConnectionEdge : global::System.IEquatable<GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_SubscriptionContractConnectionEdge>, IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_SubscriptionContractConnectionEdge
    {
        public GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_SubscriptionContractConnectionEdge(global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node node)
        {
            Node = node;
        }

        public global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node Node { get; }

        public virtual global::System.Boolean Equals(GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_SubscriptionContractConnectionEdge? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Node.Equals(other.Node));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_SubscriptionContractConnectionEdge)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Node.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionContract : global::System.IEquatable<GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionContract>, IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionContract
    {
        public GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionContract(global::System.String id, global::System.DateTimeOffset createdAt, global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring? recurring, global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Status status, global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan? subscriptionPlan, global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage>? usage)
        {
            Id = id;
            CreatedAt = createdAt;
            Recurring = recurring;
            Status = status;
            SubscriptionPlan = subscriptionPlan;
            Usage = usage;
        }

        public global::System.String Id { get; }

        public global::System.DateTimeOffset CreatedAt { get; }

        public global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring? Recurring { get; }

        public global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Status Status { get; }

        public global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan? SubscriptionPlan { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage>? Usage { get; }

        public virtual global::System.Boolean Equals(GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionContract? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && CreatedAt.Equals(other.CreatedAt) && ((Recurring is null && other.Recurring is null) || Recurring != null && Recurring.Equals(other.Recurring)) && Status.Equals(other.Status) && ((SubscriptionPlan is null && other.SubscriptionPlan is null) || SubscriptionPlan != null && SubscriptionPlan.Equals(other.SubscriptionPlan)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Usage, other.Usage);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionContract)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * CreatedAt.GetHashCode();
                if (Recurring != null)
                {
                    hash ^= 397 * Recurring.GetHashCode();
                }

                hash ^= 397 * Status.GetHashCode();
                if (SubscriptionPlan != null)
                {
                    hash ^= 397 * SubscriptionPlan.GetHashCode();
                }

                if (Usage != null)
                {
                    foreach (var Usage_elm in Usage)
                    {
                        hash ^= 397 * Usage_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_SubscriptionContractPhase : global::System.IEquatable<GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_SubscriptionContractPhase>, IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_SubscriptionContractPhase
    {
        public GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_SubscriptionContractPhase(global::System.String __typename, global::System.String currency, global::System.Int32 period, global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables>? meteredVariables)
        {
            this.__typename = __typename;
            Currency = currency;
            Period = period;
            MeteredVariables = meteredVariables;
        }

        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public global::System.String Currency { get; }

        public global::System.Int32 Period { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables>? MeteredVariables { get; }

        public virtual global::System.Boolean Equals(GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_SubscriptionContractPhase? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (__typename.Equals(other.__typename)) && Currency.Equals(other.Currency) && Period == other.Period && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(MeteredVariables, other.MeteredVariables);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_SubscriptionContractPhase)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * __typename.GetHashCode();
                hash ^= 397 * Currency.GetHashCode();
                hash ^= 397 * Period.GetHashCode();
                if (MeteredVariables != null)
                {
                    foreach (var MeteredVariables_elm in MeteredVariables)
                    {
                        hash ^= 397 * MeteredVariables_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Status_SubscriptionContractStatus : global::System.IEquatable<GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Status_SubscriptionContractStatus>, IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Status_SubscriptionContractStatus
    {
        public GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Status_SubscriptionContractStatus(global::System.DateTimeOffset? activeUntil)
        {
            ActiveUntil = activeUntil;
        }

        public global::System.DateTimeOffset? ActiveUntil { get; }

        public virtual global::System.Boolean Equals(GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Status_SubscriptionContractStatus? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ActiveUntil is null && other.ActiveUntil is null) || ActiveUntil != null && ActiveUntil.Equals(other.ActiveUntil)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Status_SubscriptionContractStatus)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ActiveUntil != null)
                {
                    hash ^= 397 * ActiveUntil.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_SubscriptionPlan : global::System.IEquatable<GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_SubscriptionPlan>, IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_SubscriptionPlan
    {
        public GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_SubscriptionPlan(global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables>? meteredVariables)
        {
            MeteredVariables = meteredVariables;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables>? MeteredVariables { get; }

        public virtual global::System.Boolean Equals(GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_SubscriptionPlan? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(MeteredVariables, other.MeteredVariables));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_SubscriptionPlan)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (MeteredVariables != null)
                {
                    foreach (var MeteredVariables_elm in MeteredVariables)
                    {
                        hash ^= 397 * MeteredVariables_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage_SubscriptionContractUsage : global::System.IEquatable<GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage_SubscriptionContractUsage>, IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage_SubscriptionContractUsage
    {
        public GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage_SubscriptionContractUsage(global::System.String meteredVariableId, global::System.Double? quantity)
        {
            MeteredVariableId = meteredVariableId;
            Quantity = quantity;
        }

        public global::System.String MeteredVariableId { get; }

        public global::System.Double? Quantity { get; }

        public virtual global::System.Boolean Equals(GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage_SubscriptionContractUsage? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (MeteredVariableId.Equals(other.MeteredVariableId)) && Quantity == other.Quantity;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage_SubscriptionContractUsage)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * MeteredVariableId.GetHashCode();
                if (Quantity != null)
                {
                    hash ^= 397 * Quantity.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReference : global::System.IEquatable<GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReference>, IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReference
    {
        public GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReference(global::System.String id, global::WrongNestedCollection.TierType? tierType, global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers> tiers)
        {
            Id = id;
            TierType = tierType;
            Tiers = tiers;
        }

        public global::System.String Id { get; }

        public global::WrongNestedCollection.TierType? TierType { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers> Tiers { get; }

        public virtual global::System.Boolean Equals(GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReference? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((TierType is null && other.TierType is null) || TierType != null && TierType.Equals(other.TierType)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Tiers, other.Tiers);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReference)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (TierType != null)
                {
                    hash ^= 397 * TierType.GetHashCode();
                }

                foreach (var Tiers_elm in Tiers)
                {
                    hash ^= 397 * Tiers_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariable : global::System.IEquatable<GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariable>, IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariable
    {
        public GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariable(global::System.String identifier, global::System.String? name)
        {
            Identifier = identifier;
            Name = name;
        }

        public global::System.String Identifier { get; }

        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariable? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Identifier.Equals(other.Identifier)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariable)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Identifier.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers_SubscriptionContractMeteredVariableTierReference : global::System.IEquatable<GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers_SubscriptionContractMeteredVariableTierReference>, IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers_SubscriptionContractMeteredVariableTierReference
    {
        public GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers_SubscriptionContractMeteredVariableTierReference(global::System.Double? price, global::System.String currency, global::System.Int32 threshold)
        {
            Price = price;
            Currency = currency;
            Threshold = threshold;
        }

        public global::System.Double? Price { get; }

        public global::System.String Currency { get; }

        public global::System.Int32 Threshold { get; }

        public virtual global::System.Boolean Equals(GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers_SubscriptionContractMeteredVariableTierReference? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Price == other.Price) && Currency.Equals(other.Currency) && Threshold == other.Threshold;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers_SubscriptionContractMeteredVariableTierReference)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Price != null)
                {
                    hash ^= 397 * Price.GetHashCode();
                }

                hash ^= 397 * Currency.GetHashCode();
                hash ^= 397 * Threshold.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCustomerSubscriptionsResult
    {
        public global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract SubscriptionContract { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCustomerSubscriptions_SubscriptionContract
    {
        public global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany? GetMany { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCustomerSubscriptions_SubscriptionContract_SubscriptionContractQueries : IGetCustomerSubscriptions_SubscriptionContract
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCustomerSubscriptions_SubscriptionContract_GetMany
    {
        public global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges>? Edges { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCustomerSubscriptions_SubscriptionContract_GetMany_SubscriptionContractConnection : IGetCustomerSubscriptions_SubscriptionContract_GetMany
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges
    {
        public global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node Node { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_SubscriptionContractConnectionEdge : IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node
    {
        public global::System.String Id { get; }

        public global::System.DateTimeOffset CreatedAt { get; }

        public global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring? Recurring { get; }

        public global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Status Status { get; }

        public global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan? SubscriptionPlan { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage>? Usage { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionContract : IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring
    {
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public global::System.String Currency { get; }

        public global::System.Int32 Period { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables>? MeteredVariables { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_SubscriptionContractPhase : IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Status
    {
        public global::System.DateTimeOffset? ActiveUntil { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Status_SubscriptionContractStatus : IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Status
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan
    {
        public global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables>? MeteredVariables { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_SubscriptionPlan : IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage
    {
        public global::System.String MeteredVariableId { get; }

        public global::System.Double? Quantity { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage_SubscriptionContractUsage : IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IMeteredVariable
    {
        public global::System.String Id { get; }

        public global::WrongNestedCollection.TierType? TierType { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers> Tiers { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables : IMeteredVariable
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReference : IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables
    {
        public global::System.String Identifier { get; }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariable : IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ITier
    {
        public global::System.Double? Price { get; }

        public global::System.String Currency { get; }

        public global::System.Int32 Threshold { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers : ITier
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers_SubscriptionContractMeteredVariableTierReference : IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public enum TierType
    {
        Graduated,
        Volume
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class TierTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, TierType>
    {
        public global::System.String TypeName => "TierType";
        public TierType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "graduated" => TierType.Graduated,
                "volume" => TierType.Volume,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                TierType.Graduated => "graduated",
                TierType.Volume => "volume",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCustomerSubscriptions GraphQL operation
    /// <code>
    /// query GetCustomerSubscriptions($tenantId: ID!, $customerIdentifier: String!) {
    ///   subscriptionContract {
    ///     __typename
    ///     getMany(customerIdentifier: $customerIdentifier, tenantId: $tenantId, first: 25) {
    ///       __typename
    ///       edges {
    ///         __typename
    ///         node {
    ///           __typename
    ///           id
    ///           createdAt
    ///           recurring {
    ///             __typename
    ///             currency
    ///             period
    ///             meteredVariables {
    ///               __typename
    ///               ... MeteredVariable
    ///               ... on SubscriptionContractMeteredVariableReference {
    ///                 id
    ///               }
    ///             }
    ///           }
    ///           status {
    ///             __typename
    ///             activeUntil
    ///           }
    ///           subscriptionPlan {
    ///             __typename
    ///             meteredVariables {
    ///               __typename
    ///               identifier
    ///               name
    ///               ... on SubscriptionPlanMeteredVariable {
    ///                 id
    ///               }
    ///             }
    ///           }
    ///           usage(start: "1990-01-01", end: "2099-01-01") {
    ///             __typename
    ///             meteredVariableId
    ///             quantity
    ///           }
    ///           ... on SubscriptionContract {
    ///             id
    ///           }
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MeteredVariable on SubscriptionContractMeteredVariableReference {
    ///   id
    ///   tierType
    ///   tiers {
    ///     __typename
    ///     ... Tier
    ///   }
    /// }
    /// 
    /// fragment Tier on SubscriptionContractMeteredVariableTierReference {
    ///   price
    ///   currency
    ///   threshold
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCustomerSubscriptionsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetCustomerSubscriptionsQueryDocument()
        {
        }

        public static GetCustomerSubscriptionsQueryDocument Instance { get; } = new GetCustomerSubscriptionsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x24, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x49, 0x44, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x67, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x79, 0x28, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x2c, 0x20, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x2c, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x32, 0x35, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x64, 0x67, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x72, 0x65, 0x63, 0x75, 0x72, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x20, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x20, 0x7d, 0x20, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x75, 0x73, 0x61, 0x67, 0x65, 0x28, 0x73, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x20, 0x22, 0x31, 0x39, 0x39, 0x30, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x22, 0x2c, 0x20, 0x65, 0x6e, 0x64, 0x3a, 0x20, 0x22, 0x32, 0x30, 0x39, 0x39, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x22, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x20, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x74, 0x69, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x20, 0x74, 0x69, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x54, 0x69, 0x65, 0x72, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x54, 0x69, 0x65, 0x72, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x65, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x69, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x20, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "bb4172a43e0fd0b6c137b1faed32d9c0");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCustomerSubscriptions GraphQL operation
    /// <code>
    /// query GetCustomerSubscriptions($tenantId: ID!, $customerIdentifier: String!) {
    ///   subscriptionContract {
    ///     __typename
    ///     getMany(customerIdentifier: $customerIdentifier, tenantId: $tenantId, first: 25) {
    ///       __typename
    ///       edges {
    ///         __typename
    ///         node {
    ///           __typename
    ///           id
    ///           createdAt
    ///           recurring {
    ///             __typename
    ///             currency
    ///             period
    ///             meteredVariables {
    ///               __typename
    ///               ... MeteredVariable
    ///               ... on SubscriptionContractMeteredVariableReference {
    ///                 id
    ///               }
    ///             }
    ///           }
    ///           status {
    ///             __typename
    ///             activeUntil
    ///           }
    ///           subscriptionPlan {
    ///             __typename
    ///             meteredVariables {
    ///               __typename
    ///               identifier
    ///               name
    ///               ... on SubscriptionPlanMeteredVariable {
    ///                 id
    ///               }
    ///             }
    ///           }
    ///           usage(start: "1990-01-01", end: "2099-01-01") {
    ///             __typename
    ///             meteredVariableId
    ///             quantity
    ///           }
    ///           ... on SubscriptionContract {
    ///             id
    ///           }
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MeteredVariable on SubscriptionContractMeteredVariableReference {
    ///   id
    ///   tierType
    ///   tiers {
    ///     __typename
    ///     ... Tier
    ///   }
    /// }
    /// 
    /// fragment Tier on SubscriptionContractMeteredVariableTierReference {
    ///   price
    ///   currency
    ///   threshold
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCustomerSubscriptionsQuery : global::WrongNestedCollection.IGetCustomerSubscriptionsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetCustomerSubscriptionsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetCustomerSubscriptionsQuery(global::StrawberryShake.IOperationExecutor<IGetCustomerSubscriptionsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetCustomerSubscriptionsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCustomerSubscriptionsResult>> ExecuteAsync(global::System.String tenantId, global::System.String customerIdentifier, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(tenantId, customerIdentifier);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCustomerSubscriptionsResult>> Watch(global::System.String tenantId, global::System.String customerIdentifier, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(tenantId, customerIdentifier);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String tenantId, global::System.String customerIdentifier)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("tenantId", FormatTenantId(tenantId));
            variables.Add("customerIdentifier", FormatCustomerIdentifier(customerIdentifier));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetCustomerSubscriptionsQueryDocument.Instance.Hash.Value, name: "GetCustomerSubscriptions", document: GetCustomerSubscriptionsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatTenantId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        private global::System.Object? FormatCustomerIdentifier(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCustomerSubscriptions GraphQL operation
    /// <code>
    /// query GetCustomerSubscriptions($tenantId: ID!, $customerIdentifier: String!) {
    ///   subscriptionContract {
    ///     __typename
    ///     getMany(customerIdentifier: $customerIdentifier, tenantId: $tenantId, first: 25) {
    ///       __typename
    ///       edges {
    ///         __typename
    ///         node {
    ///           __typename
    ///           id
    ///           createdAt
    ///           recurring {
    ///             __typename
    ///             currency
    ///             period
    ///             meteredVariables {
    ///               __typename
    ///               ... MeteredVariable
    ///               ... on SubscriptionContractMeteredVariableReference {
    ///                 id
    ///               }
    ///             }
    ///           }
    ///           status {
    ///             __typename
    ///             activeUntil
    ///           }
    ///           subscriptionPlan {
    ///             __typename
    ///             meteredVariables {
    ///               __typename
    ///               identifier
    ///               name
    ///               ... on SubscriptionPlanMeteredVariable {
    ///                 id
    ///               }
    ///             }
    ///           }
    ///           usage(start: "1990-01-01", end: "2099-01-01") {
    ///             __typename
    ///             meteredVariableId
    ///             quantity
    ///           }
    ///           ... on SubscriptionContract {
    ///             id
    ///           }
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MeteredVariable on SubscriptionContractMeteredVariableReference {
    ///   id
    ///   tierType
    ///   tiers {
    ///     __typename
    ///     ... Tier
    ///   }
    /// }
    /// 
    /// fragment Tier on SubscriptionContractMeteredVariableTierReference {
    ///   price
    ///   currency
    ///   threshold
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface IGetCustomerSubscriptionsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCustomerSubscriptionsResult>> ExecuteAsync(global::System.String tenantId, global::System.String customerIdentifier, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCustomerSubscriptionsResult>> Watch(global::System.String tenantId, global::System.String customerIdentifier, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the CrystallizeClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CrystallizeClient : global::WrongNestedCollection.ICrystallizeClient
    {
        private readonly global::WrongNestedCollection.IGetCustomerSubscriptionsQuery _getCustomerSubscriptions;
        public CrystallizeClient(global::WrongNestedCollection.IGetCustomerSubscriptionsQuery getCustomerSubscriptions)
        {
            _getCustomerSubscriptions = getCustomerSubscriptions ?? throw new global::System.ArgumentNullException(nameof(getCustomerSubscriptions));
        }

        public static global::System.String ClientName => "CrystallizeClient";
        public global::WrongNestedCollection.IGetCustomerSubscriptionsQuery GetCustomerSubscriptions => _getCustomerSubscriptions;
    }

    /// <summary>
    /// Represents the CrystallizeClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial interface ICrystallizeClient
    {
        global::WrongNestedCollection.IGetCustomerSubscriptionsQuery GetCustomerSubscriptions { get; }
    }
}

namespace WrongNestedCollection.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class SubscriptionContractEntity
    {
        public SubscriptionContractEntity(global::System.String id = default !, global::System.DateTimeOffset createdAt = default !, global::WrongNestedCollection.State.SubscriptionContractPhaseData? recurring = default !, global::WrongNestedCollection.State.SubscriptionContractStatusData status = default !, global::WrongNestedCollection.State.SubscriptionPlanData? subscriptionPlan = default !, global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.State.SubscriptionContractUsageData>? usage = default !)
        {
            Id = id;
            CreatedAt = createdAt;
            Recurring = recurring;
            Status = status;
            SubscriptionPlan = subscriptionPlan;
            Usage = usage;
        }

        public global::System.String Id { get; }

        public global::System.DateTimeOffset CreatedAt { get; }

        public global::WrongNestedCollection.State.SubscriptionContractPhaseData? Recurring { get; }

        public global::WrongNestedCollection.State.SubscriptionContractStatusData Status { get; }

        public global::WrongNestedCollection.State.SubscriptionPlanData? SubscriptionPlan { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.State.SubscriptionContractUsageData>? Usage { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class SubscriptionContractMeteredVariableReferenceEntity
    {
        public SubscriptionContractMeteredVariableReferenceEntity(global::System.String id = default !, global::WrongNestedCollection.TierType? tierType = default !, global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.State.SubscriptionContractMeteredVariableTierReferenceData> tiers = default !)
        {
            Id = id;
            TierType = tierType;
            Tiers = tiers;
        }

        public global::System.String Id { get; }

        public global::WrongNestedCollection.TierType? TierType { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.State.SubscriptionContractMeteredVariableTierReferenceData> Tiers { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class SubscriptionPlanMeteredVariableEntity
    {
        public SubscriptionPlanMeteredVariableEntity(global::System.String identifier = default !, global::System.String? name = default !)
        {
            Identifier = identifier;
            Name = name;
        }

        public global::System.String Identifier { get; }

        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCustomerSubscriptionsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::WrongNestedCollection.GetCustomerSubscriptionsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::WrongNestedCollection.State.SubscriptionContractEntity, GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionContract> _getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionContractFromSubscriptionContractEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::WrongNestedCollection.State.SubscriptionContractMeteredVariableReferenceEntity, GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReference> _getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReferenceFromSubscriptionContractMeteredVariableReferenceEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::WrongNestedCollection.State.SubscriptionPlanMeteredVariableEntity, GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariable> _getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariableFromSubscriptionPlanMeteredVariableEntityMapper;
        public GetCustomerSubscriptionsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::WrongNestedCollection.State.SubscriptionContractEntity, GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionContract> getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionContractFromSubscriptionContractEntityMapper, global::StrawberryShake.IEntityMapper<global::WrongNestedCollection.State.SubscriptionContractMeteredVariableReferenceEntity, GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReference> getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReferenceFromSubscriptionContractMeteredVariableReferenceEntityMapper, global::StrawberryShake.IEntityMapper<global::WrongNestedCollection.State.SubscriptionPlanMeteredVariableEntity, GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariable> getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariableFromSubscriptionPlanMeteredVariableEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionContractFromSubscriptionContractEntityMapper = getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionContractFromSubscriptionContractEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionContractFromSubscriptionContractEntityMapper));
            _getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReferenceFromSubscriptionContractMeteredVariableReferenceEntityMapper = getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReferenceFromSubscriptionContractMeteredVariableReferenceEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReferenceFromSubscriptionContractMeteredVariableReferenceEntityMapper));
            _getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariableFromSubscriptionPlanMeteredVariableEntityMapper = getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariableFromSubscriptionPlanMeteredVariableEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariableFromSubscriptionPlanMeteredVariableEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::WrongNestedCollection.IGetCustomerSubscriptionsResult);
        public GetCustomerSubscriptionsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetCustomerSubscriptionsResultInfo info)
            {
                return new GetCustomerSubscriptionsResult(MapNonNullableIGetCustomerSubscriptions_SubscriptionContract(info.SubscriptionContract, snapshot));
            }

            throw new global::System.ArgumentException("GetCustomerSubscriptionsResultInfo expected.");
        }

        private global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract MapNonNullableIGetCustomerSubscriptions_SubscriptionContract(global::WrongNestedCollection.State.SubscriptionContractQueriesData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetCustomerSubscriptions_SubscriptionContract returnValue = default !;
            if (data.__typename.Equals("SubscriptionContractQueries", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetCustomerSubscriptions_SubscriptionContract_SubscriptionContractQueries(MapIGetCustomerSubscriptions_SubscriptionContract_GetMany(data.GetMany, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany? MapIGetCustomerSubscriptions_SubscriptionContract_GetMany(global::WrongNestedCollection.State.SubscriptionContractConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetCustomerSubscriptions_SubscriptionContract_GetMany returnValue = default !;
            if (data?.__typename.Equals("SubscriptionContractConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetCustomerSubscriptions_SubscriptionContract_GetMany_SubscriptionContractConnection(MapIGetCustomerSubscriptions_SubscriptionContract_GetMany_EdgesNonNullableArray(data.Edges, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges>? MapIGetCustomerSubscriptions_SubscriptionContract_GetMany_EdgesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.State.SubscriptionContractConnectionEdgeData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var subscriptionContractConnectionEdges = new global::System.Collections.Generic.List<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges>();
            foreach (global::WrongNestedCollection.State.SubscriptionContractConnectionEdgeData child in list)
            {
                subscriptionContractConnectionEdges.Add(MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges(child, snapshot));
            }

            return subscriptionContractConnectionEdges;
        }

        private global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges(global::WrongNestedCollection.State.SubscriptionContractConnectionEdgeData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges returnValue = default !;
            if (data.__typename.Equals("SubscriptionContractConnectionEdge", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_SubscriptionContractConnectionEdge(MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node(data.Node ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("SubscriptionContract", global::System.StringComparison.Ordinal))
            {
                return _getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionContractFromSubscriptionContractEntityMapper.Map(snapshot.GetEntity<global::WrongNestedCollection.State.SubscriptionContractEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring? MapIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring(global::WrongNestedCollection.State.SubscriptionContractPhaseData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring returnValue = default !;
            if (data?.__typename.Equals("SubscriptionContractPhase", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_SubscriptionContractPhase(data.__typename ?? throw new global::System.ArgumentNullException(), data.Currency ?? throw new global::System.ArgumentNullException(), data.Period ?? throw new global::System.ArgumentNullException(), MapIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariablesNonNullableArray(data.MeteredVariables, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables>? MapIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariablesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var subscriptionContractMeteredVariableReferences = new global::System.Collections.Generic.List<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                subscriptionContractMeteredVariableReferences.Add(MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables(child, snapshot));
            }

            return subscriptionContractMeteredVariableReferences;
        }

        private global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("SubscriptionContractMeteredVariableReference", global::System.StringComparison.Ordinal))
            {
                return _getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReferenceFromSubscriptionContractMeteredVariableReferenceEntityMapper.Map(snapshot.GetEntity<global::WrongNestedCollection.State.SubscriptionContractMeteredVariableReferenceEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers> MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_TiersNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.State.SubscriptionContractMeteredVariableTierReferenceData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var subscriptionContractMeteredVariableTierReferences = new global::System.Collections.Generic.List<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers>();
            foreach (global::WrongNestedCollection.State.SubscriptionContractMeteredVariableTierReferenceData child in list)
            {
                subscriptionContractMeteredVariableTierReferences.Add(MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers(child, snapshot));
            }

            return subscriptionContractMeteredVariableTierReferences;
        }

        private global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers(global::WrongNestedCollection.State.SubscriptionContractMeteredVariableTierReferenceData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers returnValue = default !;
            if (data.__typename.Equals("SubscriptionContractMeteredVariableTierReference", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers_SubscriptionContractMeteredVariableTierReference(data.Price, data.Currency ?? throw new global::System.ArgumentNullException(), data.Threshold ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Status MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Status(global::WrongNestedCollection.State.SubscriptionContractStatusData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Status returnValue = default !;
            if (data.__typename.Equals("SubscriptionContractStatus", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Status_SubscriptionContractStatus(data.ActiveUntil);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan? MapIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan(global::WrongNestedCollection.State.SubscriptionPlanData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan returnValue = default !;
            if (data?.__typename.Equals("SubscriptionPlan", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_SubscriptionPlan(MapIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariablesNonNullableArray(data.MeteredVariables, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables>? MapIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariablesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var subscriptionPlanMeteredVariables = new global::System.Collections.Generic.List<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                subscriptionPlanMeteredVariables.Add(MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables(child, snapshot));
            }

            return subscriptionPlanMeteredVariables;
        }

        private global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("SubscriptionPlanMeteredVariable", global::System.StringComparison.Ordinal))
            {
                return _getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariableFromSubscriptionPlanMeteredVariableEntityMapper.Map(snapshot.GetEntity<global::WrongNestedCollection.State.SubscriptionPlanMeteredVariableEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage>? MapIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_UsageNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.State.SubscriptionContractUsageData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var subscriptionContractUsages = new global::System.Collections.Generic.List<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage>();
            foreach (global::WrongNestedCollection.State.SubscriptionContractUsageData child in list)
            {
                subscriptionContractUsages.Add(MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage(child, snapshot));
            }

            return subscriptionContractUsages;
        }

        private global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage(global::WrongNestedCollection.State.SubscriptionContractUsageData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage returnValue = default !;
            if (data.__typename.Equals("SubscriptionContractUsage", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage_SubscriptionContractUsage(data.MeteredVariableId ?? throw new global::System.ArgumentNullException(), data.Quantity);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCustomerSubscriptionsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetCustomerSubscriptionsResultInfo(global::WrongNestedCollection.State.SubscriptionContractQueriesData subscriptionContract, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            SubscriptionContract = subscriptionContract;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::WrongNestedCollection.State.SubscriptionContractQueriesData SubscriptionContract { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetCustomerSubscriptionsResultInfo(SubscriptionContract, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionContractFromSubscriptionContractEntityMapper : global::StrawberryShake.IEntityMapper<global::WrongNestedCollection.State.SubscriptionContractEntity, GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionContract>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::WrongNestedCollection.State.SubscriptionContractMeteredVariableReferenceEntity, GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReference> _getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReferenceFromSubscriptionContractMeteredVariableReferenceEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::WrongNestedCollection.State.SubscriptionPlanMeteredVariableEntity, GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariable> _getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariableFromSubscriptionPlanMeteredVariableEntityMapper;
        public GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionContractFromSubscriptionContractEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::WrongNestedCollection.State.SubscriptionContractMeteredVariableReferenceEntity, GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReference> getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReferenceFromSubscriptionContractMeteredVariableReferenceEntityMapper, global::StrawberryShake.IEntityMapper<global::WrongNestedCollection.State.SubscriptionPlanMeteredVariableEntity, GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariable> getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariableFromSubscriptionPlanMeteredVariableEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReferenceFromSubscriptionContractMeteredVariableReferenceEntityMapper = getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReferenceFromSubscriptionContractMeteredVariableReferenceEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReferenceFromSubscriptionContractMeteredVariableReferenceEntityMapper));
            _getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariableFromSubscriptionPlanMeteredVariableEntityMapper = getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariableFromSubscriptionPlanMeteredVariableEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariableFromSubscriptionPlanMeteredVariableEntityMapper));
        }

        public GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionContract Map(global::WrongNestedCollection.State.SubscriptionContractEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionContract(entity.Id, entity.CreatedAt, MapIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring(entity.Recurring, snapshot), MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Status(entity.Status, snapshot), MapIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan(entity.SubscriptionPlan, snapshot), MapIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_UsageNonNullableArray(entity.Usage, snapshot));
        }

        private global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring? MapIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring(global::WrongNestedCollection.State.SubscriptionContractPhaseData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring returnValue = default !;
            if (data?.__typename.Equals("SubscriptionContractPhase", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_SubscriptionContractPhase(data.__typename ?? throw new global::System.ArgumentNullException(), data.Currency ?? throw new global::System.ArgumentNullException(), data.Period ?? throw new global::System.ArgumentNullException(), MapIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariablesNonNullableArray(data.MeteredVariables, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables>? MapIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariablesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var subscriptionContractMeteredVariableReferences = new global::System.Collections.Generic.List<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                subscriptionContractMeteredVariableReferences.Add(MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables(child, snapshot));
            }

            return subscriptionContractMeteredVariableReferences;
        }

        private global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("SubscriptionContractMeteredVariableReference", global::System.StringComparison.Ordinal))
            {
                return _getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReferenceFromSubscriptionContractMeteredVariableReferenceEntityMapper.Map(snapshot.GetEntity<global::WrongNestedCollection.State.SubscriptionContractMeteredVariableReferenceEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers> MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_TiersNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.State.SubscriptionContractMeteredVariableTierReferenceData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var subscriptionContractMeteredVariableTierReferences = new global::System.Collections.Generic.List<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers>();
            foreach (global::WrongNestedCollection.State.SubscriptionContractMeteredVariableTierReferenceData child in list)
            {
                subscriptionContractMeteredVariableTierReferences.Add(MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers(child, snapshot));
            }

            return subscriptionContractMeteredVariableTierReferences;
        }

        private global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers(global::WrongNestedCollection.State.SubscriptionContractMeteredVariableTierReferenceData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers returnValue = default !;
            if (data.__typename.Equals("SubscriptionContractMeteredVariableTierReference", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers_SubscriptionContractMeteredVariableTierReference(data.Price, data.Currency ?? throw new global::System.ArgumentNullException(), data.Threshold ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Status MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Status(global::WrongNestedCollection.State.SubscriptionContractStatusData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Status returnValue = default !;
            if (data.__typename.Equals("SubscriptionContractStatus", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Status_SubscriptionContractStatus(data.ActiveUntil);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan? MapIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan(global::WrongNestedCollection.State.SubscriptionPlanData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan returnValue = default !;
            if (data?.__typename.Equals("SubscriptionPlan", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_SubscriptionPlan(MapIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariablesNonNullableArray(data.MeteredVariables, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables>? MapIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariablesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var subscriptionPlanMeteredVariables = new global::System.Collections.Generic.List<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                subscriptionPlanMeteredVariables.Add(MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables(child, snapshot));
            }

            return subscriptionPlanMeteredVariables;
        }

        private global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("SubscriptionPlanMeteredVariable", global::System.StringComparison.Ordinal))
            {
                return _getCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariableFromSubscriptionPlanMeteredVariableEntityMapper.Map(snapshot.GetEntity<global::WrongNestedCollection.State.SubscriptionPlanMeteredVariableEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage>? MapIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_UsageNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.State.SubscriptionContractUsageData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var subscriptionContractUsages = new global::System.Collections.Generic.List<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage>();
            foreach (global::WrongNestedCollection.State.SubscriptionContractUsageData child in list)
            {
                subscriptionContractUsages.Add(MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage(child, snapshot));
            }

            return subscriptionContractUsages;
        }

        private global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage(global::WrongNestedCollection.State.SubscriptionContractUsageData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage returnValue = default !;
            if (data.__typename.Equals("SubscriptionContractUsage", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage_SubscriptionContractUsage(data.MeteredVariableId ?? throw new global::System.ArgumentNullException(), data.Quantity);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReferenceFromSubscriptionContractMeteredVariableReferenceEntityMapper : global::StrawberryShake.IEntityMapper<global::WrongNestedCollection.State.SubscriptionContractMeteredVariableReferenceEntity, GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReference>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReferenceFromSubscriptionContractMeteredVariableReferenceEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReference Map(global::WrongNestedCollection.State.SubscriptionContractMeteredVariableReferenceEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_SubscriptionContractMeteredVariableReference(entity.Id, entity.TierType, MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_TiersNonNullableArray(entity.Tiers, snapshot));
        }

        private global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers> MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_TiersNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.State.SubscriptionContractMeteredVariableTierReferenceData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var subscriptionContractMeteredVariableTierReferences = new global::System.Collections.Generic.List<global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers>();
            foreach (global::WrongNestedCollection.State.SubscriptionContractMeteredVariableTierReferenceData child in list)
            {
                subscriptionContractMeteredVariableTierReferences.Add(MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers(child, snapshot));
            }

            return subscriptionContractMeteredVariableTierReferences;
        }

        private global::WrongNestedCollection.IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers MapNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers(global::WrongNestedCollection.State.SubscriptionContractMeteredVariableTierReferenceData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers returnValue = default !;
            if (data.__typename.Equals("SubscriptionContractMeteredVariableTierReference", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers_SubscriptionContractMeteredVariableTierReference(data.Price, data.Currency ?? throw new global::System.ArgumentNullException(), data.Threshold ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariableFromSubscriptionPlanMeteredVariableEntityMapper : global::StrawberryShake.IEntityMapper<global::WrongNestedCollection.State.SubscriptionPlanMeteredVariableEntity, GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariable>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariableFromSubscriptionPlanMeteredVariableEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariable Map(global::WrongNestedCollection.State.SubscriptionPlanMeteredVariableEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariables_SubscriptionPlanMeteredVariable(entity.Identifier, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class GetCustomerSubscriptionsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::WrongNestedCollection.IGetCustomerSubscriptionsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::WrongNestedCollection.IGetCustomerSubscriptionsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::WrongNestedCollection.TierType> _tierTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        public GetCustomerSubscriptionsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::WrongNestedCollection.IGetCustomerSubscriptionsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _tierTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::WrongNestedCollection.TierType>("TierType") ?? throw new global::System.ArgumentException("No serializer for type `TierType` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetCustomerSubscriptionsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetCustomerSubscriptionsResult Result, GetCustomerSubscriptionsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetCustomerSubscriptionsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetCustomerSubscriptionsResult, GetCustomerSubscriptionsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::WrongNestedCollection.State.SubscriptionContractQueriesData subscriptionContractId = default !;
            _entityStore.Update(session =>
            {
                subscriptionContractId = DeserializeNonNullableIGetCustomerSubscriptions_SubscriptionContract(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "subscriptionContract"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetCustomerSubscriptionsResultInfo(subscriptionContractId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::WrongNestedCollection.State.SubscriptionContractQueriesData DeserializeNonNullableIGetCustomerSubscriptions_SubscriptionContract(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SubscriptionContractQueries", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::WrongNestedCollection.State.SubscriptionContractQueriesData(typename, getMany: DeserializeIGetCustomerSubscriptions_SubscriptionContract_GetMany(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "getMany"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::WrongNestedCollection.State.SubscriptionContractConnectionData? DeserializeIGetCustomerSubscriptions_SubscriptionContract_GetMany(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SubscriptionContractConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::WrongNestedCollection.State.SubscriptionContractConnectionData(typename, edges: DeserializeIGetCustomerSubscriptions_SubscriptionContract_GetMany_EdgesNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "edges"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.State.SubscriptionContractConnectionEdgeData>? DeserializeIGetCustomerSubscriptions_SubscriptionContract_GetMany_EdgesNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var subscriptionContractConnectionEdges = new global::System.Collections.Generic.List<global::WrongNestedCollection.State.SubscriptionContractConnectionEdgeData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                subscriptionContractConnectionEdges.Add(DeserializeNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges(session, child, entityIds));
            }

            return subscriptionContractConnectionEdges;
        }

        private global::WrongNestedCollection.State.SubscriptionContractConnectionEdgeData DeserializeNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SubscriptionContractConnectionEdge", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::WrongNestedCollection.State.SubscriptionContractConnectionEdgeData(typename, node: UpdateNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_NodeEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "node"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_NodeEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("SubscriptionContract", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::WrongNestedCollection.State.SubscriptionContractEntity? entity))
                {
                    session.SetEntity(entityId, new global::WrongNestedCollection.State.SubscriptionContractEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "recurring"), entityIds), DeserializeNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Status(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), DeserializeIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "subscriptionPlan"), entityIds), DeserializeIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_UsageNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "usage"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::WrongNestedCollection.State.SubscriptionContractEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), DeserializeIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "recurring"), entityIds), DeserializeNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Status(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), DeserializeIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "subscriptionPlan"), entityIds), DeserializeIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_UsageNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "usage"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::WrongNestedCollection.State.SubscriptionContractPhaseData? DeserializeIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SubscriptionContractPhase", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::WrongNestedCollection.State.SubscriptionContractPhaseData(typename, currency: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "currency")), period: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "period")), meteredVariables: UpdateIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariablesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "meteredVariables"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? UpdateIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariablesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var subscriptionContractMeteredVariableReferences = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                subscriptionContractMeteredVariableReferences.Add(UpdateNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariablesEntity(session, child, entityIds));
            }

            return subscriptionContractMeteredVariableReferences;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariablesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("SubscriptionContractMeteredVariableReference", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::WrongNestedCollection.State.SubscriptionContractMeteredVariableReferenceEntity? entity))
                {
                    session.SetEntity(entityId, new global::WrongNestedCollection.State.SubscriptionContractMeteredVariableReferenceEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeTierType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "tierType")), DeserializeNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_TiersNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "tiers"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::WrongNestedCollection.State.SubscriptionContractMeteredVariableReferenceEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeTierType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "tierType")), DeserializeNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_TiersNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "tiers"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::WrongNestedCollection.TierType? DeserializeTierType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _tierTypeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.State.SubscriptionContractMeteredVariableTierReferenceData> DeserializeNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_TiersNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var subscriptionContractMeteredVariableTierReferences = new global::System.Collections.Generic.List<global::WrongNestedCollection.State.SubscriptionContractMeteredVariableTierReferenceData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                subscriptionContractMeteredVariableTierReferences.Add(DeserializeNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers(child));
            }

            return subscriptionContractMeteredVariableTierReferences;
        }

        private global::WrongNestedCollection.State.SubscriptionContractMeteredVariableTierReferenceData DeserializeNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Recurring_MeteredVariables_Tiers(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SubscriptionContractMeteredVariableTierReference", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::WrongNestedCollection.State.SubscriptionContractMeteredVariableTierReferenceData(typename, price: DeserializeDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price")), currency: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "currency")), threshold: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "threshold")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Double? DeserializeDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::WrongNestedCollection.State.SubscriptionContractStatusData DeserializeNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Status(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SubscriptionContractStatus", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::WrongNestedCollection.State.SubscriptionContractStatusData(typename, activeUntil: DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "activeUntil")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.DateTimeOffset? DeserializeDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::WrongNestedCollection.State.SubscriptionPlanData? DeserializeIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SubscriptionPlan", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::WrongNestedCollection.State.SubscriptionPlanData(typename, meteredVariables: UpdateIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariablesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "meteredVariables"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? UpdateIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariablesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var subscriptionPlanMeteredVariables = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                subscriptionPlanMeteredVariables.Add(UpdateNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariablesEntity(session, child, entityIds));
            }

            return subscriptionPlanMeteredVariables;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_SubscriptionPlan_MeteredVariablesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("SubscriptionPlanMeteredVariable", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::WrongNestedCollection.State.SubscriptionPlanMeteredVariableEntity? entity))
                {
                    session.SetEntity(entityId, new global::WrongNestedCollection.State.SubscriptionPlanMeteredVariableEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "identifier")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::WrongNestedCollection.State.SubscriptionPlanMeteredVariableEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "identifier")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.State.SubscriptionContractUsageData>? DeserializeIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_UsageNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var subscriptionContractUsages = new global::System.Collections.Generic.List<global::WrongNestedCollection.State.SubscriptionContractUsageData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                subscriptionContractUsages.Add(DeserializeNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage(child));
            }

            return subscriptionContractUsages;
        }

        private global::WrongNestedCollection.State.SubscriptionContractUsageData DeserializeNonNullableIGetCustomerSubscriptions_SubscriptionContract_GetMany_Edges_Node_Usage(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SubscriptionContractUsage", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::WrongNestedCollection.State.SubscriptionContractUsageData(typename, meteredVariableId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "meteredVariableId")), quantity: DeserializeDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "quantity")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class SubscriptionContractQueriesData
    {
        public SubscriptionContractQueriesData(global::System.String __typename, global::WrongNestedCollection.State.SubscriptionContractConnectionData? getMany = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            GetMany = getMany;
        }

        public global::System.String __typename { get; }

        public global::WrongNestedCollection.State.SubscriptionContractConnectionData? GetMany { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class SubscriptionContractConnectionData
    {
        public SubscriptionContractConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.State.SubscriptionContractConnectionEdgeData>? edges = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Edges = edges;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::WrongNestedCollection.State.SubscriptionContractConnectionEdgeData>? Edges { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class SubscriptionContractConnectionEdgeData
    {
        public SubscriptionContractConnectionEdgeData(global::System.String __typename, global::StrawberryShake.EntityId? node = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Node = node;
        }

        public global::System.String __typename { get; }

        public global::StrawberryShake.EntityId? Node { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class SubscriptionContractPhaseData
    {
        public SubscriptionContractPhaseData(global::System.String __typename, global::System.String? currency = default !, global::System.Int32? period = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? meteredVariables = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Currency = currency;
            Period = period;
            MeteredVariables = meteredVariables;
        }

        public global::System.String __typename { get; }

        public global::System.String? Currency { get; }

        public global::System.Int32? Period { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? MeteredVariables { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class SubscriptionContractStatusData
    {
        public SubscriptionContractStatusData(global::System.String __typename, global::System.DateTimeOffset? activeUntil = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            ActiveUntil = activeUntil;
        }

        public global::System.String __typename { get; }

        public global::System.DateTimeOffset? ActiveUntil { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class SubscriptionPlanData
    {
        public SubscriptionPlanData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? meteredVariables = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            MeteredVariables = meteredVariables;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? MeteredVariables { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class SubscriptionContractUsageData
    {
        public SubscriptionContractUsageData(global::System.String __typename, global::System.String? meteredVariableId = default !, global::System.Double? quantity = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            MeteredVariableId = meteredVariableId;
            Quantity = quantity;
        }

        public global::System.String __typename { get; }

        public global::System.String? MeteredVariableId { get; }

        public global::System.Double? Quantity { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class SubscriptionContractMeteredVariableTierReferenceData
    {
        public SubscriptionContractMeteredVariableTierReferenceData(global::System.String __typename, global::System.Double? price = default !, global::System.String? currency = default !, global::System.Int32? threshold = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Price = price;
            Currency = currency;
            Threshold = threshold;
        }

        public global::System.String __typename { get; }

        public global::System.Double? Price { get; }

        public global::System.String? Currency { get; }

        public global::System.Int32? Threshold { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CrystallizeClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "SubscriptionContract" => ParseSubscriptionContractEntityId(obj, __typename),
                "SubscriptionContractMeteredVariableReference" => ParseSubscriptionContractMeteredVariableReferenceEntityId(obj, __typename),
                "SubscriptionPlanMeteredVariable" => ParseSubscriptionPlanMeteredVariableEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "SubscriptionContract" => FormatSubscriptionContractEntityId(entityId),
                "SubscriptionContractMeteredVariableReference" => FormatSubscriptionContractMeteredVariableReferenceEntityId(entityId),
                "SubscriptionPlanMeteredVariable" => FormatSubscriptionPlanMeteredVariableEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseSubscriptionContractEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatSubscriptionContractEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSubscriptionContractMeteredVariableReferenceEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatSubscriptionContractMeteredVariableReferenceEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseSubscriptionPlanMeteredVariableEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatSubscriptionPlanMeteredVariableEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.0.0")]
    public partial class CrystallizeClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public CrystallizeClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
